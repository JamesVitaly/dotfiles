# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'Promise Module':
    'prefix': 'Promise module'
    'body': """
      let modulePromise;

      export const ${2:methodName} = ({ ${3:options} }, promise) => {
        modulePromise = promise;
        try {
          $4
          modulePromise.resolve();
        } catch (exception) {
          modulePromise.reject({
            type: \'${1:handleMethodName}.${2:methodName}\',
            reason: exception,
          });
        }
      };

      export const ${1:handleMethodName} = ({ ${3:options} }) => new Promise((resolve, reject) => {
        ${2:methodName}({ ${3:options} }, { resolve, reject });
      });
    """
  'Promise Module function':
    'prefix': 'Promise module function'
    'body': """
    const ${2:methodName} = ({ ${3:options} }) => {
      try {
        $4
      } catch (exception) {
        modulePromise.reject({
          type: \'${1:handleMethodName}.${2:methodName}\',
          reason: exception,
        });
      }
    };
    """
  'React Component':
    'prefix': 'React component'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';
      import { TAPi18n } from 'meteor/tap:i18n';

      export class ${1:componentName} extends React.Component {

        translations(key, options) {
          return TAPi18n.__(`${1:componentName}.${key}`, options);
        }

        render() {
          return (
            <div className="${1:componentName}">
              $2
            </div>
          );
        }
      }

      ${1:componentName}.propTypes = {

      };
    """
  'import Meteor':
    'prefix': 'import Meteor'
    'body': 'import { Meteor } from \'meteor/meteor\';'
  'import Link':
    'prefix': 'import Link'
    'body': 'import { Link } from \'react-router-dom\';'
  'import React':
    'prefix': 'import React'
    'body': 'import React from \'react\';'
  'import analytics':
    'prefix': 'import analytics'
    'body': 'import analytics from \'/imports/modules/client/analytics.js\';'
  'import Polls':
    'prefix': 'import Polls'
    'body': 'import { Polls } from \'/imports/api/polls/polls.js\';'
  'import Poll Questions':
    'prefix': 'import Poll Questions'
    'body': 'import { Questions } from \'/imports/api/polls/questions.js\';'
  'import Poll Options':
    'prefix': 'import Poll Options'
    'body': 'import { Options } from \'/imports/api/polls/options.js\';'
  'import Account Data':
    'prefix': 'import Account Data'
    'body': 'import { AccountData } from \'/imports/api/accounts/account-data.js\';'
  'import Button':
    'prefix': 'import Button'
    'body': 'import { Button } from \'/imports/ui/components/_forms/Button\';'
